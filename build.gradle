/*
 * Copyright 2015-2016 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'groovy'
    id 'jacoco'
    id 'nebula.info' version '3.0.4'
    id 'nebula.contacts' version '3.0.1'
    id 'nebula.integtest' version '3.0.3'
    id 'nebula.maven-publish' version '4.4.4'
    id 'nebula.nebula-release' version '4.0.1'
    id 'nebula.nebula-bintray' version '3.3.4'
    id 'com.gradle.plugin-publish' version '0.9.2'
    id 'nebula.javadoc-jar' version '4.4.4'
    id 'nebula.source-jar' version '4.4.4'
    id 'nebula.maven-apache-license' version '4.2.2'
    id 'com.github.kt3k.coveralls' version '2.4.0'
    id 'nebula.provided-base' version '3.0.3'
}

apply from: 'https://raw.githubusercontent.com/nebula-plugins/nebula-core/59c9e15f561372a8a72bbe13e4fbb114d0ef16f8/common.gradle'

description 'Pluggable and configurable linter tool for identifying and reporting on patterns of misuse or deprecations in Gradle scripts'

contacts {
    'jkschneider@gmail.com' {
        moniker 'Jon Schneider'
        github 'jkschneider'
    }
}

repositories {
    mavenCentral()
}

// Write the lint plugin's classes to a file to share with testKit
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text =
                sourceSets.main.runtimeClasspath.findAll { !it.name.contains('xerces') }.join('\n')
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile gradleTestKit()

    compile 'org.ow2.asm:asm:5.0.4'
    compile('org.codenarc:CodeNarc:latest.release') {
        transitive = false
    }
    compile 'com.netflix.nebula:gradle-info-plugin:3.0.4'

    compile 'org.eclipse.jgit:org.eclipse.jgit:4.+'

    // these two dependencies exist so we can provide a test harness
    // to proprietary rule implementations packed in other jars
    provided ('org.spockframework:spock-core:latest.release') {
        exclude module: 'groovy-all'
    }
    provided 'com.netflix.nebula:nebula-test:3.1.0'

    testCompile ('org.spockframework:spock-core:latest.release') {
        exclude module: 'groovy-all'
    }
    testCompile 'org.ow2.asm:asm-util:5.0.4'

    // Add the classpath file to the test runtime classpath
    testRuntime files(createClasspathManifest)
}

pluginBundle {
    website = 'https://github.com/nebula-plugins/gradle-lint-plugin'
    vcsUrl = 'https://github.com/nebula-plugins/gradle-lint-plugin.git'
    description = 'Pluggable and configurable linter tool for identifying and reporting on patterns of misuse or deprecations in Gradle scripts'

    plugins {
        dependencyLock {
            id = 'nebula.lint'
            displayName = 'Nebula Lint plugin'
            description = 'Pluggable and configurable linter tool for identifying and reporting on patterns of misuse or deprecations in Gradle scripts'
            tags = ['nebula', 'lint']
        }
    }

    mavenCoordinates {
        groupId = 'com.netflix.nebula'
        artifactId = 'gradle-lint-plugin'
    }
}

task listOutputs << {
    tasks.compileJava.outputs.files.findAll { it.path.endsWith('classes/main') }.each {
        println it
    }
}

task mvids << {
    project.configurations*.resolvedConfiguration*.firstLevelModuleDependencies*.collect { it.module.id }.flatten().unique().each {
        println it
    }
}
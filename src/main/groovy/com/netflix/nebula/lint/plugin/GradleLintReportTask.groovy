/*
 * Copyright 2015-2016 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.netflix.nebula.lint.plugin

import com.netflix.nebula.lint.GradleViolation
import org.codenarc.AnalysisContext
import org.codenarc.analyzer.AbstractSourceAnalyzer
import org.codenarc.report.HtmlReportWriter
import org.codenarc.report.ReportWriter
import org.codenarc.report.TextReportWriter
import org.codenarc.report.XmlReportWriter
import org.codenarc.results.DirectoryResults
import org.codenarc.results.FileResults
import org.codenarc.results.Results
import org.codenarc.rule.Rule
import org.codenarc.ruleset.RuleSet
import org.codenarc.source.SourceString
import org.gradle.api.DefaultTask
import org.gradle.api.plugins.quality.CodeNarcReports
import org.gradle.api.plugins.quality.internal.CodeNarcReportsImpl
import org.gradle.api.reporting.Report
import org.gradle.api.reporting.Reporting
import org.gradle.api.tasks.Nested
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.VerificationTask
import org.gradle.internal.reflect.Instantiator

import javax.inject.Inject

class GradleLintReportTask extends DefaultTask implements VerificationTask, Reporting<CodeNarcReports> {
    @Nested
    private final CodeNarcReportsImpl reports

    /**
     * Whether or not the build should break when the verifications performed by this task fail.
     */
    boolean ignoreFailures

    GradleLintReportTask() {
        reports = instantiator.newInstance(CodeNarcReportsImpl, this)
        finalizedBy 'lintGradle'
    }

    class ReportableAnalyzer extends AbstractSourceAnalyzer {
        SourceString source

        ReportableAnalyzer(String source) {
            this.source = new SourceString(source)
        }

        Results analyze(RuleSet ruleSet) {
            def results = new DirectoryResults(project.projectDir.absolutePath)
            def violations = (collectViolations(source, ruleSet) as List<GradleViolation>)
            violations*.fixes.flatten().groupBy { it.affectedFile }
                .each { affectedFile, fixes ->
                    results.addChild(new FileResults(affectedFile.absolutePath, fixes*.violation.unique(true)))
                    results.numberOfFilesInThisDirectory++
                }
            results
        }

        List getSourceDirectories() {
            []
        }
    }

    @TaskAction
    void generateReport() {
        if(reports.enabled) {
            def lintExt = project.extensions.getByType(GradleLintExtension)
            def registry = new LintRuleRegistry()
            def ruleSet = RuleSetFactory.configureRuleSet(lintExt.rules.collect { registry.buildRules(it, project) }.flatten() as List<Rule>)
            def results = new ReportableAnalyzer(project.buildFile.text).analyze(ruleSet)

            reports.enabled.each { Report r ->
                ReportWriter writer = null

                switch (r.name) {
                    case 'xml': writer = new XmlReportWriter(outputFile: r.destination); break
                    case 'html': writer = new HtmlReportWriter(outputFile: r.destination); break
                    case 'text': writer = new TextReportWriter(outputFile: r.destination); break
                }

                writer.writeReport(new AnalysisContext(ruleSet: ruleSet), results)
            }
        }
    }

    @Inject
    Instantiator getInstantiator() {
        null // see http://gradle.1045684.n5.nabble.com/injecting-dependencies-into-task-instances-td5712637.html
    }

    /**
     * Returns the reports to be generated by this task.
     */
    @Override
    CodeNarcReports getReports() {
        reports
    }

    /**
     * Configures the reports to be generated by this task.
     */
    @Override
    CodeNarcReports reports(Closure closure) {
        reports.configure(closure)
    }
}

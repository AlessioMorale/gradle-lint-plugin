package com.netflix.nebula.lint.plugin

import org.codenarc.AnalysisContext
import org.codenarc.analyzer.FilesystemSourceAnalyzer
import org.codenarc.report.HtmlReportWriter
import org.codenarc.report.ReportWriter
import org.codenarc.report.TextReportWriter
import org.codenarc.report.XmlReportWriter
import org.codenarc.rule.Rule
import org.gradle.api.DefaultTask
import org.gradle.api.plugins.quality.CodeNarcReports
import org.gradle.api.plugins.quality.internal.CodeNarcReportsImpl
import org.gradle.api.reporting.Report
import org.gradle.api.reporting.Reporting
import org.gradle.api.tasks.Nested
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.VerificationTask
import org.gradle.internal.reflect.Instantiator

import javax.inject.Inject

class GradleLintReportTask extends DefaultTask implements VerificationTask, Reporting<CodeNarcReports> {
    @Nested
    private final CodeNarcReportsImpl reports

    /**
     * Whether or not the build should break when the verifications performed by this task fail.
     */
    boolean ignoreFailures

    GradleLintReportTask() {
        reports = instantiator.newInstance(CodeNarcReportsImpl, this)
        finalizedBy 'buildLint'
    }

    @TaskAction
    void generateReport() {
        if(reports.enabled) {
            def lintExt = project.extensions.getByType(GradleLintExtension)
            def registry = new LintRuleRegistry(getClass().classLoader)
            def ruleSet = RuleSetFactory.configureRuleSet(lintExt.rules.collect { registry.findRule(it) }.flatten() as List<Rule>)
            def results = new FilesystemSourceAnalyzer(baseDirectory: project.projectDir.absolutePath,
                    includes: project.buildFile.absolutePath).analyze(ruleSet)

            reports.enabled.each { Report r ->
                ReportWriter writer = null

                switch (r.name) {
                    case 'xml': writer = new XmlReportWriter(outputFile: r.destination); break
                    case 'html': writer = new HtmlReportWriter(outputFile: r.destination); break
                    case 'text': writer = new TextReportWriter(outputFile: r.destination); break
                }

                writer.writeReport(new AnalysisContext(ruleSet: ruleSet), results)
            }
        }
    }

    @Inject
    Instantiator getInstantiator() {
        null // see http://gradle.1045684.n5.nabble.com/injecting-dependencies-into-task-instances-td5712637.html
    }

    /**
     * Returns the reports to be generated by this task.
     */
    @Override
    CodeNarcReports getReports() {
        reports
    }

    /**
     * Configures the reports to be generated by this task.
     */
    @Override
    CodeNarcReports reports(Closure closure) {
        reports.configure(closure)
    }
}
